时间分片
    CPU资源非常宝贵 将时间分片 每一片时间执行一个程序 造成同时运行多个程序的假象

同一个进程里面有多个线程 统一线程内资源共享

线程是CPU资源的最小单位
    解决了同一个进程同一时刻只能占用一个核的问题
    解决了同一个进程只能穿行执行程序的问题

创建线程 C11
    thrd_create(thrd_t *thr, thrd_start_t func, void *arg)
    thrd_t *thr 线程类型
    thrd_start_t func 让线程执行的函数
    void *arg 函数的参数

    线程创建后会立即启动 但不一定会立即执行 具体执行看CPU的调度

windows下的thrd_current(void)调用GetCurrentThread() 底层实现并不会返回真实线程id
mingw的实现中主线程不会等待子线程执行完成后退出

线程休眠
    thrd_sleep(&timespec)
线程等待
    thrd_join(thrd_t, &res)
    thrd_t 被等待的线程
    res 被等待线程的结果 即传入函数的返回值
    thrd_join执行后线程的资源会释放
不返回结果的线程资源回收
    thrd_detach(thrd_t)
    不需要知道线程的结果 让线程自己执行结束后释放线程

detach和join这两个函数是互斥的